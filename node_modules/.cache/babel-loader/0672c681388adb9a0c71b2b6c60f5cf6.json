{"ast":null,"code":"/**\n * @author Toru Nagashima <https://github.com/mysticatea>\n * See LICENSE file in root directory for full license.\n */\n\"use strict\";\n\nconst KEYS = require(\"./visitor-keys.json\"); // Types.\n\n\nconst NODE_TYPES = Object.freeze(Object.keys(KEYS)); // Freeze the keys.\n\nfor (const type of NODE_TYPES) {\n  Object.freeze(KEYS[type]);\n}\n\nObject.freeze(KEYS); // List to ignore keys.\n\nconst KEY_BLACKLIST = new Set([\"parent\", \"leadingComments\", \"trailingComments\"]);\n/**\n * Check whether a given key should be used or not.\n * @param {string} key The key to check.\n * @returns {boolean} `true` if the key should be used.\n */\n\nfunction filterKey(key) {\n  return !KEY_BLACKLIST.has(key) && key[0] !== \"_\";\n} //------------------------------------------------------------------------------\n// Public interfaces\n//------------------------------------------------------------------------------\n\n\nmodule.exports = Object.freeze({\n  /**\n   * Visitor keys.\n   * @type {{ [type: string]: string[] | undefined }}\n   */\n  KEYS,\n\n  /**\n   * Get visitor keys of a given node.\n   * @param {Object} node The AST node to get keys.\n   * @returns {string[]} Visitor keys of the node.\n   */\n  getKeys(node) {\n    return Object.keys(node).filter(filterKey);\n  },\n\n  // Disable valid-jsdoc rule because it reports syntax error on the type of @returns.\n  // eslint-disable-next-line valid-jsdoc\n\n  /**\n   * Make the union set with `KEYS` and given keys.\n   * @param {Object} additionalKeys The additional keys.\n   * @returns {{ [type: string]: string[] | undefined }} The union set.\n   */\n  unionWith(additionalKeys) {\n    const retv = Object.assign({}, KEYS);\n\n    for (const type of Object.keys(additionalKeys)) {\n      if (retv.hasOwnProperty(type)) {\n        const keys = new Set(additionalKeys[type]);\n\n        for (const key of retv[type]) {\n          keys.add(key);\n        }\n\n        retv[type] = Object.freeze(Array.from(keys));\n      } else {\n        retv[type] = Object.freeze(Array.from(additionalKeys[type]));\n      }\n    }\n\n    return Object.freeze(retv);\n  }\n\n});","map":null,"metadata":{},"sourceType":"script"}